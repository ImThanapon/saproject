(window.webpackJsonp=window.webpackJsonp||[]).push([["CoachmarkData"],{U6Xm:function(e,t,r){"use strict";r.d(t,"a",(function(){return a}));var n=r("G82u");class a{}a.addCoachmark=new n.a("AddCoachmark"),a.updateCoachmarkVisibleStatus=new n.a("UpdateCoachmarkVisibleStatus")},g7TJ:function(e,t,r){"use strict";r.r(t),r.d(t,"CoachmarkDataActions",(function(){return i.a})),r.d(t,"CoachmarkDataConnector",(function(){return p})),r.d(t,"CoachmarkDataReducer",(function(){return C})),r.d(t,"CoachmarkPayload",(function(){return n.a})),r.d(t,"CoachmarkPlacement",(function(){return n.b})),r.d(t,"CoachmarkPointerPosition",(function(){return n.c})),r.d(t,"CoachmarkSize",(function(){return n.d})),r.d(t,"CoachmarkSource",(function(){return n.e})),r.d(t,"FloatingCoachmarkPosition",(function(){return n.f})),r.d(t,"IrisAction",(function(){return a.a})),r.d(t,"IrisSurfaceName",(function(){return s.d})),r.d(t,"irisStorageUtility",(function(){return h.a})),r.d(t,"IrisTelemetryEventType",(function(){return a.b})),r.d(t,"RegisterErrorTrackingCallback",(function(){return b.a})),r.d(t,"ToolingInfo",(function(){return k}));var n=r("rcIs"),a=r("VZ41"),s=r("ljWX"),i=r("U6Xm"),c=r("D57K"),o=r("HxRh"),d=r("1w6q"),u=r("tMmC"),m=r("z5Om"),g=r("s9+9"),f=r("9J8d"),b=r("MLMI");class l{static getCoachmarksFromDataConnector(e){return Object(c.b)(this,void 0,void 0,(function*(){if(this.irisDataConnector=yield f.a.getInstance().rootReducer.getDataConnector(g.a.IrisData),!this.irisDataConnector)return b.a.trackAppErrorEvent(Object.assign(Object.assign({},o.W.IrisDataConnectorUndefined),{message:"No Iris data connector"})),null;const t=yield this.irisDataConnector.getPayload(e);if(!this.validateSurface(t,e))return null;const r=t.creatives,n=r[Math.floor(Math.random()*r.length)];return this.extractCoachmarkCreativeMessages(n,t.placement)}))}static fireIrisBeacon(e,t,r,n,a){return Object(c.b)(this,void 0,void 0,(function*(){this.irisDataConnector=yield f.a.getInstance().rootReducer.getDataConnector(g.a.IrisData),this.irisDataConnector?this.irisDataConnector.sendActionUpdate(a,n,e,t,r):b.a.trackAppErrorEvent(Object.assign(Object.assign({},o.W.IrisDataConnectorUndefined),{message:"No Iris data connector",pb:Object.assign(Object.assign({},o.W.EventTypeUndefined.pb),{customMessage:`Error reporting iris beacons eventType: ${e}, telemetryInfo: ${t}, irisAction: ${r}, creativeId: ${n}, placementId:${a}`})}))}))}static validateSurface(e,t){return e?!m.a.infoHasErrors(e)||(e.errors.forEach(e=>{2040!=(e&&e.code?e.code:e.errors&&e.errors.length>0&&e.errors[0].code)&&b.a.trackAppErrorEvent(Object.assign(Object.assign({},o.W.ErrorFoundForSurface),{message:"Surface errors discovered",pb:Object.assign(Object.assign({},o.W.ErrorFoundForSurface.pb),{customMessage:"Error with surface: "+s.d.MSNNewsCoachmark+" Code: "+e.code+" Message: "+e.msg})}))}),!1):(u.a.log("IrisHandler: Iris surface not found for the campaign: "+e),!1)}static extractCoachmarkCreativeMessages(e,t){const r=[];let a;return e&&e.content&&e.content.cm&&!e.content.rewards&&e.telemetry&&e.creativeId&&t&&e.content.cm.forEach(s=>{a=Object.assign(Object.assign({},s),{coachmarkSource:n.e.Iris,creativeId:e.creativeId,ctaList:s.cta,ecsFeatureFlags:e.content.ecsFeatureFlags,eventUrl:e.telemetry,frequency:Number(e.content.frequency),frequencyInterval:Number(e.content.frequencyInterval),isEcsExperiment:"true"===e.content.isEcsExperiment,placementId:t,timeoutMilliseconds:Number(s.timeoutMilliseconds)}),r.push(a)}),r}}var h=r("QnRU");class p extends d.a{addCoachmark(e,t=!1){return Object(c.b)(this,void 0,void 0,(function*(){let r=!1;if(yield Object(h.c)(t)){const t=n.a.extractMessages(e);if(!t||0===t.length)return!1;const a=new Promise(e=>{i.a.updateCoachmarkVisibleStatus.registerObserver(()=>{r=this.getCurrentState().isCoachmarkOnScreen,e()})});i.a.addCoachmark.getActionSender(this).send(t),yield a}return r}))}reportEvent(e,t,r,n,s){e?t?e!==a.b.Action||r?l.fireIrisBeacon(e,t,r,n,s):b.a.trackAppErrorEvent(Object.assign(Object.assign({},o.W.IrisActionUndefined),{message:"Iris action undefined",pb:Object.assign(Object.assign({},o.W.EventTypeUndefined.pb),{customMessage:`Error reporting iris beacons eventType: ${e}, telemetryInfo: ${JSON.stringify(t)}, irisAction: ${r}, creativeId: ${n}, placementId: ${s}`})})):b.a.trackAppErrorEvent(Object.assign(Object.assign({},o.W.TelemetryInfoUndefined),{message:"Iris telemetry info not found",pb:Object.assign(Object.assign({},o.W.EventTypeUndefined.pb),{customMessage:`Error reporting iris beacons eventType: ${e}, telemetryInfo: ${JSON.stringify(t)}, irisAction: ${r}, creativeId: ${n}, placementId: ${s}`})})):b.a.trackAppErrorEvent(Object.assign(Object.assign({},o.W.EventTypeUndefined),{message:"Event type is undefined",pb:Object.assign(Object.assign({},o.W.EventTypeUndefined.pb),{customMessage:`Error reporting iris beacons eventType: ${e}, telemetryInfo: ${JSON.stringify(t)}, irisAction: ${r}, creativeId: ${n}, placementId: ${s}`})}))}getCoachmarks(e){return Object(c.b)(this,void 0,void 0,(function*(){return yield l.getCoachmarksFromDataConnector(e)}))}}var v=r("05Au");class C{reduce(e,t){if(!e)return{coachmarkMessages:void 0,isCoachmarkOnScreen:void 0};if(!t)return e;let r,n=!1;return n=n||v.a.handleAction(t,i.a.addCoachmark,t=>{r=Object.assign(Object.assign({},e),{coachmarkMessages:t})}),n=n||v.a.handleAction(t,i.a.updateCoachmarkVisibleStatus,t=>{r=Object.assign(Object.assign({},e),{isCoachmarkOnScreen:t})}),r||e}}const k={experienceConfigSchema:{}}}}]);